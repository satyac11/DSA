package com.graph;

import java.util.Arrays;
import java.util.Stack;

public class Graph {
	static int [][]adjMatrix;
	static void intializeGraph(){
		adjMatrix = new int[8][8];
		adjMatrix[1][2] = 1;
		adjMatrix[1][3] = 1;
		adjMatrix[2][1] = 1;
		adjMatrix[2][4] = 1;
		adjMatrix[2][5] = 1;
		adjMatrix[3][1] = 1;
		adjMatrix[3][6] = 1;
		adjMatrix[3][7] = 1;
		adjMatrix[4][2] = 1;
		adjMatrix[5][2] = 1;
		adjMatrix[6][3] = 1;
		adjMatrix[7][3] = 1;		
	}
	
	public void DFS(int vertex){
		boolean []visited = new boolean[adjMatrix.length];
		//System.out.println("visited length: "+visited.length+" "+Arrays.toString(visited));
		
		Stack<Integer> st = new Stack<Integer>();
		System.out.printf("%d ", vertex);
		st.push(vertex);
		visited[vertex]=true;
		
		while(!st.isEmpty()){
			int t = st.peek();
			boolean hasChild=false;
			
			
				
			//System.out.printf("%d ", t);
			
			for(int i=1;i<=7;i++){
				if(adjMatrix[t][i]==1 && !visited[i]){
					System.out.printf("%d ", i);
					st.push(i);
					visited[i]=true;
					hasChild=true;
					break;
					
				}
			}
			if(!hasChild)
				st.pop();
						
		}		
		
		
	}
	static boolean []visited = new boolean[8];
	public void DFSRecursive(int vertex){
		
		if(!visited[vertex]){
			System.out.printf("%d ",vertex);
			visited[vertex]=true;
			for(int i=1;i<visited.length;i++){
				if(adjMatrix[vertex][i]==1 && !visited[i])
					DFSRecursive(i);
			}
		}
		
	}
	
	public static void main(String args[]){
		Graph gr= new Graph();
		intializeGraph();
		System.out.println("Non Recursive: ");
		gr.DFS(1);
		System.out.println("\nRecursive: ");
		gr.DFSRecursive(2);
	}

}
