package com.graph;

import java.util.Stack;

public class GraphUsingAdjList {
	static Node []adjList = new Node[8];
	
	static public void add(int source, int destination){
		Node newNode = new Node();
		newNode.setData(destination);
		Node srcNode = adjList[source];
		
		newNode.next = srcNode.next;
		srcNode.next = newNode;		
		
	}
	
	static public void printList(int index){
		for(int i=1;i<8;i++){
			System.out.println("Node "+i+":");
			Node temp = adjList[i].next;
			
			while(temp!=null){
				System.out.printf("%d ",temp.data);
				temp = temp.next;
			}
			System.out.println();
		}
		
		
	}
	
	public void DFS(int vertex){
		boolean []visited = new boolean[8];
		Stack<Integer> st = new Stack<Integer>();
		System.out.println("DFS on Adjecency List: ");
		System.out.printf("%d ",vertex);
		st.push(vertex);
		visited[vertex] = true;
		
		while(!st.isEmpty()){
			int t = st.peek();
			Node temp = adjList[t];
			boolean isDone=true;
			
			while(temp!=null){
				if(temp.next !=null && !visited[temp.next.data]){
					int value = temp.next.data;
					System.out.printf("%d ",value);
					st.push(value);
					visited[value]=true;
					isDone =false;
					break;
				}
				temp = temp.next;
			}
			
			if(isDone)
				st.pop();
			
			
		}
		
		
	}
	

	public static void main(String[] args) {		
		
		for(int i=1;i<8;i++){
			adjList[i]=new Node();
		}
		
		add(1,3);
		add(1,2);
		
		add(2,5);
		add(2,4);
		add(2,1);
		
		add(3,7);
		add(3,6);
		add(3,1);
		
		
		add(4,2);
		add(5,2);
		add(6,3);
		add(7,3);
		printList(1);
		
		GraphUsingAdjList ad = new GraphUsingAdjList();
		ad.DFS(2);
		
		

	}

}
